// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v3.20.3
// source: xendit.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "xendit";

export interface CreateInvoiceRequest {
  externalId: string;
  amount: number;
  payerEmail: string;
  description: string;
  credentials: string;
}

export interface InvoiceResponse {
  id: string;
  externalId: string;
  status: string;
  amount: number;
  invoiceUrl: string;
  description: string;
}

function createBaseCreateInvoiceRequest(): CreateInvoiceRequest {
  return { externalId: "", amount: 0, payerEmail: "", description: "", credentials: "" };
}

export const CreateInvoiceRequest: MessageFns<CreateInvoiceRequest> = {
  encode(message: CreateInvoiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.externalId !== "") {
      writer.uint32(10).string(message.externalId);
    }
    if (message.amount !== 0) {
      writer.uint32(16).int32(message.amount);
    }
    if (message.payerEmail !== "") {
      writer.uint32(26).string(message.payerEmail);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.credentials !== "") {
      writer.uint32(42).string(message.credentials);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateInvoiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateInvoiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.externalId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.amount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.payerEmail = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.credentials = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateInvoiceRequest {
    return {
      externalId: isSet(object.externalId) ? globalThis.String(object.externalId) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      payerEmail: isSet(object.payerEmail) ? globalThis.String(object.payerEmail) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      credentials: isSet(object.credentials) ? globalThis.String(object.credentials) : "",
    };
  },

  toJSON(message: CreateInvoiceRequest): unknown {
    const obj: any = {};
    if (message.externalId !== "") {
      obj.externalId = message.externalId;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.payerEmail !== "") {
      obj.payerEmail = message.payerEmail;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.credentials !== "") {
      obj.credentials = message.credentials;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateInvoiceRequest>, I>>(base?: I): CreateInvoiceRequest {
    return CreateInvoiceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateInvoiceRequest>, I>>(object: I): CreateInvoiceRequest {
    const message = createBaseCreateInvoiceRequest();
    message.externalId = object.externalId ?? "";
    message.amount = object.amount ?? 0;
    message.payerEmail = object.payerEmail ?? "";
    message.description = object.description ?? "";
    message.credentials = object.credentials ?? "";
    return message;
  },
};

function createBaseInvoiceResponse(): InvoiceResponse {
  return { id: "", externalId: "", status: "", amount: 0, invoiceUrl: "", description: "" };
}

export const InvoiceResponse: MessageFns<InvoiceResponse> = {
  encode(message: InvoiceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.externalId !== "") {
      writer.uint32(18).string(message.externalId);
    }
    if (message.status !== "") {
      writer.uint32(26).string(message.status);
    }
    if (message.amount !== 0) {
      writer.uint32(32).int32(message.amount);
    }
    if (message.invoiceUrl !== "") {
      writer.uint32(42).string(message.invoiceUrl);
    }
    if (message.description !== "") {
      writer.uint32(50).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InvoiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvoiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.externalId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.amount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.invoiceUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InvoiceResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      externalId: isSet(object.externalId) ? globalThis.String(object.externalId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      invoiceUrl: isSet(object.invoiceUrl) ? globalThis.String(object.invoiceUrl) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: InvoiceResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.externalId !== "") {
      obj.externalId = message.externalId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.invoiceUrl !== "") {
      obj.invoiceUrl = message.invoiceUrl;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InvoiceResponse>, I>>(base?: I): InvoiceResponse {
    return InvoiceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InvoiceResponse>, I>>(object: I): InvoiceResponse {
    const message = createBaseInvoiceResponse();
    message.id = object.id ?? "";
    message.externalId = object.externalId ?? "";
    message.status = object.status ?? "";
    message.amount = object.amount ?? 0;
    message.invoiceUrl = object.invoiceUrl ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

export interface paymentService {
  CreateInvoice(request: CreateInvoiceRequest): Promise<InvoiceResponse>;
}

export const paymentServiceServiceName = "xendit.paymentService";
export class paymentServiceClientImpl implements paymentService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || paymentServiceServiceName;
    this.rpc = rpc;
    this.CreateInvoice = this.CreateInvoice.bind(this);
  }
  CreateInvoice(request: CreateInvoiceRequest): Promise<InvoiceResponse> {
    const data = CreateInvoiceRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateInvoice", data);
    return promise.then((data) => InvoiceResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
