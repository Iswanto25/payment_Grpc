// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v3.20.3
// source: xendit.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "payment";

export interface CreateInvoiceRequest {
  externalId: string;
  amount: number;
  payerEmail: string;
  description: string;
  credentials: string;
}

export interface CreateVirtualAccountRequest {
  externalId: string;
  bankCode: string;
  name: string;
}

export interface CreateQrCodesRequest {
  referenceId: string;
  type: string;
  currency: string;
  amount: number;
  expiresAt: string;
}

export interface InvoiceResponse {
  id: string;
  extenalId: string;
  status: string;
  amount: number;
  description: string;
  invoicesUrl: string;
  availableBanks: availableBanks[];
  availableEwallets: availableEwallets[];
  availableQrCode: availableQrCode[];
  availableOTR: availableOTR[];
  currency: string;
}

export interface availableBanks {
  bankCode: string;
  collectionType: string;
  transferAmount: number;
  bankBranch: string;
  accountHolderName: string;
  identityAmount: number;
}

export interface availableEwallets {
  ewalletType: string;
}

export interface availableQrCode {
  qrCodeType: string;
}

export interface availableOTR {
  retailOutletName: string;
}

export interface VirtualAccountResponse {
  id: string;
  externalId: string;
  bankCode: string;
  name: string;
  accountNumber: string;
  status: string;
}

export interface CreateQrCodesResponse {
  referenceId: string;
  type: string;
  currency: string;
  channelCode: string;
  amount: number;
  expiresAt: string;
  qrString: string;
  status: string;
}

function createBaseCreateInvoiceRequest(): CreateInvoiceRequest {
  return { externalId: "", amount: 0, payerEmail: "", description: "", credentials: "" };
}

export const CreateInvoiceRequest: MessageFns<CreateInvoiceRequest> = {
  encode(message: CreateInvoiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.externalId !== "") {
      writer.uint32(10).string(message.externalId);
    }
    if (message.amount !== 0) {
      writer.uint32(16).int32(message.amount);
    }
    if (message.payerEmail !== "") {
      writer.uint32(26).string(message.payerEmail);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.credentials !== "") {
      writer.uint32(42).string(message.credentials);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateInvoiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateInvoiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.externalId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.amount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.payerEmail = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.credentials = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateInvoiceRequest {
    return {
      externalId: isSet(object.externalId) ? globalThis.String(object.externalId) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      payerEmail: isSet(object.payerEmail) ? globalThis.String(object.payerEmail) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      credentials: isSet(object.credentials) ? globalThis.String(object.credentials) : "",
    };
  },

  toJSON(message: CreateInvoiceRequest): unknown {
    const obj: any = {};
    if (message.externalId !== "") {
      obj.externalId = message.externalId;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.payerEmail !== "") {
      obj.payerEmail = message.payerEmail;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.credentials !== "") {
      obj.credentials = message.credentials;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateInvoiceRequest>, I>>(base?: I): CreateInvoiceRequest {
    return CreateInvoiceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateInvoiceRequest>, I>>(object: I): CreateInvoiceRequest {
    const message = createBaseCreateInvoiceRequest();
    message.externalId = object.externalId ?? "";
    message.amount = object.amount ?? 0;
    message.payerEmail = object.payerEmail ?? "";
    message.description = object.description ?? "";
    message.credentials = object.credentials ?? "";
    return message;
  },
};

function createBaseCreateVirtualAccountRequest(): CreateVirtualAccountRequest {
  return { externalId: "", bankCode: "", name: "" };
}

export const CreateVirtualAccountRequest: MessageFns<CreateVirtualAccountRequest> = {
  encode(message: CreateVirtualAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.externalId !== "") {
      writer.uint32(10).string(message.externalId);
    }
    if (message.bankCode !== "") {
      writer.uint32(18).string(message.bankCode);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateVirtualAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateVirtualAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.externalId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.bankCode = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateVirtualAccountRequest {
    return {
      externalId: isSet(object.externalId) ? globalThis.String(object.externalId) : "",
      bankCode: isSet(object.bankCode) ? globalThis.String(object.bankCode) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: CreateVirtualAccountRequest): unknown {
    const obj: any = {};
    if (message.externalId !== "") {
      obj.externalId = message.externalId;
    }
    if (message.bankCode !== "") {
      obj.bankCode = message.bankCode;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateVirtualAccountRequest>, I>>(base?: I): CreateVirtualAccountRequest {
    return CreateVirtualAccountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateVirtualAccountRequest>, I>>(object: I): CreateVirtualAccountRequest {
    const message = createBaseCreateVirtualAccountRequest();
    message.externalId = object.externalId ?? "";
    message.bankCode = object.bankCode ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCreateQrCodesRequest(): CreateQrCodesRequest {
  return { referenceId: "", type: "", currency: "", amount: 0, expiresAt: "" };
}

export const CreateQrCodesRequest: MessageFns<CreateQrCodesRequest> = {
  encode(message: CreateQrCodesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.referenceId !== "") {
      writer.uint32(10).string(message.referenceId);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.currency !== "") {
      writer.uint32(26).string(message.currency);
    }
    if (message.amount !== 0) {
      writer.uint32(32).int32(message.amount);
    }
    if (message.expiresAt !== "") {
      writer.uint32(42).string(message.expiresAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateQrCodesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateQrCodesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.referenceId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.amount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.expiresAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateQrCodesRequest {
    return {
      referenceId: isSet(object.referenceId) ? globalThis.String(object.referenceId) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      expiresAt: isSet(object.expiresAt) ? globalThis.String(object.expiresAt) : "",
    };
  },

  toJSON(message: CreateQrCodesRequest): unknown {
    const obj: any = {};
    if (message.referenceId !== "") {
      obj.referenceId = message.referenceId;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.expiresAt !== "") {
      obj.expiresAt = message.expiresAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateQrCodesRequest>, I>>(base?: I): CreateQrCodesRequest {
    return CreateQrCodesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateQrCodesRequest>, I>>(object: I): CreateQrCodesRequest {
    const message = createBaseCreateQrCodesRequest();
    message.referenceId = object.referenceId ?? "";
    message.type = object.type ?? "";
    message.currency = object.currency ?? "";
    message.amount = object.amount ?? 0;
    message.expiresAt = object.expiresAt ?? "";
    return message;
  },
};

function createBaseInvoiceResponse(): InvoiceResponse {
  return {
    id: "",
    extenalId: "",
    status: "",
    amount: 0,
    description: "",
    invoicesUrl: "",
    availableBanks: [],
    availableEwallets: [],
    availableQrCode: [],
    availableOTR: [],
    currency: "",
  };
}

export const InvoiceResponse: MessageFns<InvoiceResponse> = {
  encode(message: InvoiceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.extenalId !== "") {
      writer.uint32(18).string(message.extenalId);
    }
    if (message.status !== "") {
      writer.uint32(26).string(message.status);
    }
    if (message.amount !== 0) {
      writer.uint32(48).int32(message.amount);
    }
    if (message.description !== "") {
      writer.uint32(58).string(message.description);
    }
    if (message.invoicesUrl !== "") {
      writer.uint32(66).string(message.invoicesUrl);
    }
    for (const v of message.availableBanks) {
      availableBanks.encode(v!, writer.uint32(74).fork()).join();
    }
    for (const v of message.availableEwallets) {
      availableEwallets.encode(v!, writer.uint32(82).fork()).join();
    }
    for (const v of message.availableQrCode) {
      availableQrCode.encode(v!, writer.uint32(90).fork()).join();
    }
    for (const v of message.availableOTR) {
      availableOTR.encode(v!, writer.uint32(98).fork()).join();
    }
    if (message.currency !== "") {
      writer.uint32(106).string(message.currency);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InvoiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvoiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.extenalId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.amount = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.invoicesUrl = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.availableBanks.push(availableBanks.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.availableEwallets.push(availableEwallets.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.availableQrCode.push(availableQrCode.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.availableOTR.push(availableOTR.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InvoiceResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      extenalId: isSet(object.extenalId) ? globalThis.String(object.extenalId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      invoicesUrl: isSet(object.invoicesUrl) ? globalThis.String(object.invoicesUrl) : "",
      availableBanks: globalThis.Array.isArray(object?.availableBanks)
        ? object.availableBanks.map((e: any) => availableBanks.fromJSON(e))
        : [],
      availableEwallets: globalThis.Array.isArray(object?.availableEwallets)
        ? object.availableEwallets.map((e: any) => availableEwallets.fromJSON(e))
        : [],
      availableQrCode: globalThis.Array.isArray(object?.availableQrCode)
        ? object.availableQrCode.map((e: any) => availableQrCode.fromJSON(e))
        : [],
      availableOTR: globalThis.Array.isArray(object?.availableOTR)
        ? object.availableOTR.map((e: any) => availableOTR.fromJSON(e))
        : [],
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
    };
  },

  toJSON(message: InvoiceResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.extenalId !== "") {
      obj.extenalId = message.extenalId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.invoicesUrl !== "") {
      obj.invoicesUrl = message.invoicesUrl;
    }
    if (message.availableBanks?.length) {
      obj.availableBanks = message.availableBanks.map((e) => availableBanks.toJSON(e));
    }
    if (message.availableEwallets?.length) {
      obj.availableEwallets = message.availableEwallets.map((e) => availableEwallets.toJSON(e));
    }
    if (message.availableQrCode?.length) {
      obj.availableQrCode = message.availableQrCode.map((e) => availableQrCode.toJSON(e));
    }
    if (message.availableOTR?.length) {
      obj.availableOTR = message.availableOTR.map((e) => availableOTR.toJSON(e));
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InvoiceResponse>, I>>(base?: I): InvoiceResponse {
    return InvoiceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InvoiceResponse>, I>>(object: I): InvoiceResponse {
    const message = createBaseInvoiceResponse();
    message.id = object.id ?? "";
    message.extenalId = object.extenalId ?? "";
    message.status = object.status ?? "";
    message.amount = object.amount ?? 0;
    message.description = object.description ?? "";
    message.invoicesUrl = object.invoicesUrl ?? "";
    message.availableBanks = object.availableBanks?.map((e) => availableBanks.fromPartial(e)) || [];
    message.availableEwallets = object.availableEwallets?.map((e) => availableEwallets.fromPartial(e)) || [];
    message.availableQrCode = object.availableQrCode?.map((e) => availableQrCode.fromPartial(e)) || [];
    message.availableOTR = object.availableOTR?.map((e) => availableOTR.fromPartial(e)) || [];
    message.currency = object.currency ?? "";
    return message;
  },
};

function createBaseavailableBanks(): availableBanks {
  return {
    bankCode: "",
    collectionType: "",
    transferAmount: 0,
    bankBranch: "",
    accountHolderName: "",
    identityAmount: 0,
  };
}

export const availableBanks: MessageFns<availableBanks> = {
  encode(message: availableBanks, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bankCode !== "") {
      writer.uint32(10).string(message.bankCode);
    }
    if (message.collectionType !== "") {
      writer.uint32(18).string(message.collectionType);
    }
    if (message.transferAmount !== 0) {
      writer.uint32(24).int32(message.transferAmount);
    }
    if (message.bankBranch !== "") {
      writer.uint32(34).string(message.bankBranch);
    }
    if (message.accountHolderName !== "") {
      writer.uint32(42).string(message.accountHolderName);
    }
    if (message.identityAmount !== 0) {
      writer.uint32(48).int32(message.identityAmount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): availableBanks {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseavailableBanks();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bankCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.collectionType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.transferAmount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.bankBranch = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.accountHolderName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.identityAmount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): availableBanks {
    return {
      bankCode: isSet(object.bankCode) ? globalThis.String(object.bankCode) : "",
      collectionType: isSet(object.collectionType) ? globalThis.String(object.collectionType) : "",
      transferAmount: isSet(object.transferAmount) ? globalThis.Number(object.transferAmount) : 0,
      bankBranch: isSet(object.bankBranch) ? globalThis.String(object.bankBranch) : "",
      accountHolderName: isSet(object.accountHolderName) ? globalThis.String(object.accountHolderName) : "",
      identityAmount: isSet(object.identityAmount) ? globalThis.Number(object.identityAmount) : 0,
    };
  },

  toJSON(message: availableBanks): unknown {
    const obj: any = {};
    if (message.bankCode !== "") {
      obj.bankCode = message.bankCode;
    }
    if (message.collectionType !== "") {
      obj.collectionType = message.collectionType;
    }
    if (message.transferAmount !== 0) {
      obj.transferAmount = Math.round(message.transferAmount);
    }
    if (message.bankBranch !== "") {
      obj.bankBranch = message.bankBranch;
    }
    if (message.accountHolderName !== "") {
      obj.accountHolderName = message.accountHolderName;
    }
    if (message.identityAmount !== 0) {
      obj.identityAmount = Math.round(message.identityAmount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<availableBanks>, I>>(base?: I): availableBanks {
    return availableBanks.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<availableBanks>, I>>(object: I): availableBanks {
    const message = createBaseavailableBanks();
    message.bankCode = object.bankCode ?? "";
    message.collectionType = object.collectionType ?? "";
    message.transferAmount = object.transferAmount ?? 0;
    message.bankBranch = object.bankBranch ?? "";
    message.accountHolderName = object.accountHolderName ?? "";
    message.identityAmount = object.identityAmount ?? 0;
    return message;
  },
};

function createBaseavailableEwallets(): availableEwallets {
  return { ewalletType: "" };
}

export const availableEwallets: MessageFns<availableEwallets> = {
  encode(message: availableEwallets, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ewalletType !== "") {
      writer.uint32(10).string(message.ewalletType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): availableEwallets {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseavailableEwallets();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ewalletType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): availableEwallets {
    return { ewalletType: isSet(object.ewalletType) ? globalThis.String(object.ewalletType) : "" };
  },

  toJSON(message: availableEwallets): unknown {
    const obj: any = {};
    if (message.ewalletType !== "") {
      obj.ewalletType = message.ewalletType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<availableEwallets>, I>>(base?: I): availableEwallets {
    return availableEwallets.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<availableEwallets>, I>>(object: I): availableEwallets {
    const message = createBaseavailableEwallets();
    message.ewalletType = object.ewalletType ?? "";
    return message;
  },
};

function createBaseavailableQrCode(): availableQrCode {
  return { qrCodeType: "" };
}

export const availableQrCode: MessageFns<availableQrCode> = {
  encode(message: availableQrCode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.qrCodeType !== "") {
      writer.uint32(10).string(message.qrCodeType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): availableQrCode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseavailableQrCode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.qrCodeType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): availableQrCode {
    return { qrCodeType: isSet(object.qrCodeType) ? globalThis.String(object.qrCodeType) : "" };
  },

  toJSON(message: availableQrCode): unknown {
    const obj: any = {};
    if (message.qrCodeType !== "") {
      obj.qrCodeType = message.qrCodeType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<availableQrCode>, I>>(base?: I): availableQrCode {
    return availableQrCode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<availableQrCode>, I>>(object: I): availableQrCode {
    const message = createBaseavailableQrCode();
    message.qrCodeType = object.qrCodeType ?? "";
    return message;
  },
};

function createBaseavailableOTR(): availableOTR {
  return { retailOutletName: "" };
}

export const availableOTR: MessageFns<availableOTR> = {
  encode(message: availableOTR, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.retailOutletName !== "") {
      writer.uint32(10).string(message.retailOutletName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): availableOTR {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseavailableOTR();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.retailOutletName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): availableOTR {
    return { retailOutletName: isSet(object.retailOutletName) ? globalThis.String(object.retailOutletName) : "" };
  },

  toJSON(message: availableOTR): unknown {
    const obj: any = {};
    if (message.retailOutletName !== "") {
      obj.retailOutletName = message.retailOutletName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<availableOTR>, I>>(base?: I): availableOTR {
    return availableOTR.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<availableOTR>, I>>(object: I): availableOTR {
    const message = createBaseavailableOTR();
    message.retailOutletName = object.retailOutletName ?? "";
    return message;
  },
};

function createBaseVirtualAccountResponse(): VirtualAccountResponse {
  return { id: "", externalId: "", bankCode: "", name: "", accountNumber: "", status: "" };
}

export const VirtualAccountResponse: MessageFns<VirtualAccountResponse> = {
  encode(message: VirtualAccountResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.externalId !== "") {
      writer.uint32(18).string(message.externalId);
    }
    if (message.bankCode !== "") {
      writer.uint32(26).string(message.bankCode);
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.accountNumber !== "") {
      writer.uint32(42).string(message.accountNumber);
    }
    if (message.status !== "") {
      writer.uint32(50).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VirtualAccountResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVirtualAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.externalId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.bankCode = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.accountNumber = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VirtualAccountResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      externalId: isSet(object.externalId) ? globalThis.String(object.externalId) : "",
      bankCode: isSet(object.bankCode) ? globalThis.String(object.bankCode) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      accountNumber: isSet(object.accountNumber) ? globalThis.String(object.accountNumber) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: VirtualAccountResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.externalId !== "") {
      obj.externalId = message.externalId;
    }
    if (message.bankCode !== "") {
      obj.bankCode = message.bankCode;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.accountNumber !== "") {
      obj.accountNumber = message.accountNumber;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VirtualAccountResponse>, I>>(base?: I): VirtualAccountResponse {
    return VirtualAccountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VirtualAccountResponse>, I>>(object: I): VirtualAccountResponse {
    const message = createBaseVirtualAccountResponse();
    message.id = object.id ?? "";
    message.externalId = object.externalId ?? "";
    message.bankCode = object.bankCode ?? "";
    message.name = object.name ?? "";
    message.accountNumber = object.accountNumber ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseCreateQrCodesResponse(): CreateQrCodesResponse {
  return {
    referenceId: "",
    type: "",
    currency: "",
    channelCode: "",
    amount: 0,
    expiresAt: "",
    qrString: "",
    status: "",
  };
}

export const CreateQrCodesResponse: MessageFns<CreateQrCodesResponse> = {
  encode(message: CreateQrCodesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.referenceId !== "") {
      writer.uint32(10).string(message.referenceId);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.currency !== "") {
      writer.uint32(26).string(message.currency);
    }
    if (message.channelCode !== "") {
      writer.uint32(34).string(message.channelCode);
    }
    if (message.amount !== 0) {
      writer.uint32(40).int32(message.amount);
    }
    if (message.expiresAt !== "") {
      writer.uint32(50).string(message.expiresAt);
    }
    if (message.qrString !== "") {
      writer.uint32(58).string(message.qrString);
    }
    if (message.status !== "") {
      writer.uint32(66).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateQrCodesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateQrCodesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.referenceId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.channelCode = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.amount = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.expiresAt = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.qrString = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateQrCodesResponse {
    return {
      referenceId: isSet(object.referenceId) ? globalThis.String(object.referenceId) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      channelCode: isSet(object.channelCode) ? globalThis.String(object.channelCode) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      expiresAt: isSet(object.expiresAt) ? globalThis.String(object.expiresAt) : "",
      qrString: isSet(object.qrString) ? globalThis.String(object.qrString) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: CreateQrCodesResponse): unknown {
    const obj: any = {};
    if (message.referenceId !== "") {
      obj.referenceId = message.referenceId;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.channelCode !== "") {
      obj.channelCode = message.channelCode;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.expiresAt !== "") {
      obj.expiresAt = message.expiresAt;
    }
    if (message.qrString !== "") {
      obj.qrString = message.qrString;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateQrCodesResponse>, I>>(base?: I): CreateQrCodesResponse {
    return CreateQrCodesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateQrCodesResponse>, I>>(object: I): CreateQrCodesResponse {
    const message = createBaseCreateQrCodesResponse();
    message.referenceId = object.referenceId ?? "";
    message.type = object.type ?? "";
    message.currency = object.currency ?? "";
    message.channelCode = object.channelCode ?? "";
    message.amount = object.amount ?? 0;
    message.expiresAt = object.expiresAt ?? "";
    message.qrString = object.qrString ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

export interface paymentService {
  CreateInvoice(request: CreateInvoiceRequest): Promise<InvoiceResponse>;
  CreateVirtualAccount(request: CreateVirtualAccountRequest): Promise<VirtualAccountResponse>;
  CreateQrCodes(request: CreateQrCodesRequest): Promise<CreateQrCodesResponse>;
}

export const paymentServiceServiceName = "payment.paymentService";
export class paymentServiceClientImpl implements paymentService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || paymentServiceServiceName;
    this.rpc = rpc;
    this.CreateInvoice = this.CreateInvoice.bind(this);
    this.CreateVirtualAccount = this.CreateVirtualAccount.bind(this);
    this.CreateQrCodes = this.CreateQrCodes.bind(this);
  }
  CreateInvoice(request: CreateInvoiceRequest): Promise<InvoiceResponse> {
    const data = CreateInvoiceRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateInvoice", data);
    return promise.then((data) => InvoiceResponse.decode(new BinaryReader(data)));
  }

  CreateVirtualAccount(request: CreateVirtualAccountRequest): Promise<VirtualAccountResponse> {
    const data = CreateVirtualAccountRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateVirtualAccount", data);
    return promise.then((data) => VirtualAccountResponse.decode(new BinaryReader(data)));
  }

  CreateQrCodes(request: CreateQrCodesRequest): Promise<CreateQrCodesResponse> {
    const data = CreateQrCodesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateQrCodes", data);
    return promise.then((data) => CreateQrCodesResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
